struct Container {
    constructors: HashMap<String, Box<Any>>,
}

impl Container {
    fn new() -> Container {
        Container { constructors: HashMap::new() }}
    
    fn add<T: Constructors<T> + 'static>
      (&mut self, s: &str, value: T) {
        self.constructors.insert(s.to_string(),
          Box::new(value.construct()) as Box<Any>);
    }
    
    fn resolve<T: Clone + 'static>(&self, s: &str) -> T {
        let item = self.constructors.get(s).unwrap();
        let construct =
          item.downcast_ref::<Construct<T>>().unwrap();
        construct.c()
    }
}
