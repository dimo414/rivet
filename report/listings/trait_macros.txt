/// Constructs a "binder", a struct that can hold arbitrary types, installed via the bind! macro.
///   Usage: binder!(BinderTypeName)
///     BinderTypeName:  Name of the struct to define.
macro_rules! binder {
    ($store:ident) => {
        struct $store { store: HashMap<String, Box<Any>> }
        impl $store {
            fn new() -> $store { $store { store: HashMap::new() } }
        }}}

/// Binds a value to to a binder instance - effectively just a wrapper for
///   BindingTrait::put(&mut binder, value)
/// but can be used for consistency with the other macro APIs
///   Usage: bind!(store, BindingTrait, Binding)
///     BinderInstance:  A Binder instance, where the binding will be stored
///     BindingTrait:    Trait which will provide Binding
///     Binding:         Instance to bind to the BindingTrait
macro_rules! bind {
    ($map:ident, $bnd:ident, $value:expr) => {
        $bnd::put(&mut $map, $value);
    }}

/// Registers a binding, creating a trait with the given name
///   Usage: binding!(BinderType, BindingTraitName, BindingType)
///     BinderType:        A binder type, created by binder!()
///     BindingTraitName:  Trait to create that will provide the given binding
///     BindingType:       Type that BindingTrait will provide
macro_rules! binding {
    ($store:ident, $name:ident, $ty:ty) => {
        trait $name { fn get(&self) -> &$ty; fn put(&mut self, value: $ty); }

        impl $name for $store {
            fn get(&self) -> &$ty {
                match self.store.get(stringify!($name).into()) {
                    Some(dep) => { match dep.downcast_ref::<$ty>() {
                        Some(dep) => dep,
                        None => panic!("Could not downcast {} to {} - wrong binding! type?",
                            stringify!($name), stringify!($ty))
                    }},
                    None => panic!("{} has no binding for {}!\n\tBound types: {:?}\n",
                         stringify!($store), stringify!($name), self.store.keys())
                }
            }
            fn put(&mut self, value: $ty) {
                match self.store.entry(stringify!($name).into()) {
                    Entry::Occupied(entry) => {
                        let existing: &$ty = entry.get().downcast_ref::<$ty>().unwrap();
                        panic!("Conflicting binding for {}; cannot bind to {:?} already bound to {:?}",
                            stringify!($bnd), value, existing)
                    },
                    Entry::Vacant(entry) => {
                        entry.insert(Box::new(value) as Box<Any>);
                    }
                }
            }}}}

// Registers a provider of a binding, introducing a recursive dependency on another binding
// Note this can only provide references, not owned types (because the closure would be the owner,
// and it goes out of scope upon returning).
//   Usage: provider!(BinderType, ProviderTraitName, ProviderType, DependantTrait, Closure)
///     BinderType:         A binder type, created by binder!()
///     ProviderTraitName:  Trait to create that will provide the given binding
///     ProviderType:       Type that ProviderTrait will provide
///     DependantTrait:     Binding trait that the provider depends on
///     Closure:            A closure of the form |d: &'a DependantTrait| ... that returns a &ProviderType
macro_rules! provider {
    ($store:ident, $name:ident, $ty:ty, $dep:ty, $provider_fn:expr) => {
        trait $name { fn get(&self) -> &$ty; }

        impl $name for $store {
            fn get<'a>(&'a self) -> &$ty {
                &$provider_fn(self as &$dep)
            }}}}